from djitellopy import Tello
from queue import LifoQueue
import cv2
import threading
import time

class droneController:
    moveSpeed = 20
    liftSpeed = 2
    rotationSpeed = 60
    takeOffHeight = 2
    tello = None
    
    def __init__(self):
        self.tello = Tello()
       
        self.tello.connect()
        
        print("Drone Connected")
        
        
    def execute_command(self,cmd):   
        keywords = cmd.split(' ')
        
        match(keywords[0]):
            case "move":
                self.move(keywords[1:])
            case "change":
                self.change(keywords[1:])
            case "turn":
                self.turn(keywords[1:])
            case _:
                command = ' '.join(keywords)
                
                if(command == "take off"):
                    self.tello.takeoff()
                elif(command == "land"):
                    #stop all threads in stack and land
                    self.clear_process_stack()
                    self.tello.land()
                elif(command == "stop"):
                    self.tello.stop()
                else:
                    print("Unknown Command")
                    pass     

    def move(self, sub_cmd):
        match(self.sub_cmd[0]):
            case "left":
                self.tello.move_left(sub_cmd[1])
            case "right":
                self.tello.right(sub_cmd[1])
            case "forwards":
                self.tello.move_forward(sub_cmd[1])
            case "backwards":
                self.tello.move_back(sub_cmd[1])
            case "up":
                self.tello.move_up(sub_cmd[1])
            case "down":
                self.tello.move_down(self.sub_cmd[1])
            case _:
                print('invalid subcommand')
        print(f"Drone moving {sub_cmd[0]} by {sub_cmd[1]}cm")
        
    def turn(self, sub_cmd):
        match(sub_cmd[0]):
            case "left":
                self.tello.rotate_counter_clockwise(sub_cmd[1]) 
            case "right":
                self.tello.rotate_clockwise(sub_cmd[1])
            case _:
                print('invalid subcommand')
                
        print(f"Drone rotating {sub_cmd[0]} {sub_cmd[1]} degrees");
        
    def change(self, sub_cmd):
        match(sub_cmd[0]):
            case "speed":
                self.tello.set_speed(sub_cmd[1])
            case _:
                print('invalid subcommand')
        print(f"Setting drone {sub_cmd[0]} to {sub_cmd[1]}");   
            
        """
            controls:
                1. move(direction) at preset speed
                2. move(direction) at dictated speed
                3. 
            
            
            process: allow only 2 threads to run
                - video stream thread
                - command being executed
                
            how to interrupt thread:
                - while the current command thread is running, and if the command generated by the WHisper API is different from the current command,
                the thread is terminated and a new thread is created to execute that command
                
                
            dictionary:
            1. move
                - up
                - down
                - left
                - right
                - forwards
                - backwards
            2. take off
            3. turn
                - left
                - right
            4. change
                - speed
        """
            