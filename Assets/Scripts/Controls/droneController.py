from djitellopy import Tello
from queue import LifoQueue
import cv2
import threading
import time

class droneController:
    def __init__(self):
        self.tello = Tello()
        self.speed = 20
       
        self.tello.connect()
        
        
        #self.tello.streamon()
        
        self.stop_event = threading.Event()
        
        self.processes = LifoQueue()
    
        #thread_video = threading.Thread(target=self.show_video)
        #thread_video.start()
        
        #self.processes.put(thread_video)
        
    def clear_process_stack():
        stop_event.set()
        
        while self.processes:
            thread = self.processes.get()
            thread.join()
            
    def eject_process():
        stop_event.set()
        
        thread = self.processes.get()
        thread.join()
        
    def execute_command(cmd):   
        keywords = cmd.split(' ')
        
        match(keywords[0]):
            case "move":
                move(keywords[1:])
            case "change":
                change(keywords[1:])
            case "turn":
                turn(keywords[1:])
            case _:
                command = ' '.join(keywords)
                
                if(command == "take off"):
                    tello.takeoff()
                elif(command == "land"):
                    #stop all threads in stack and land
                    self.clear_process_stack()
                    tello.land()
                elif(command == "stop"):
                    tello.stop()
                else:
                    print("Unknown Command")
                    pass     

    def move(sub_cmd):
        match(sub_cmd[0]):
            case "left":
                tello.move_left(sub_cmd[1])
            case "right":
                tello.right(sub_cmd[1])
            case "forwards":
                tello.move_forward(sub_cmd[1])
            case "backwards":
                tello.move_back(sub_cmd[1])
            case "up":
                tello.move_up(sub_cmd[1])
            case "down":
                tello.move_down(sub_cmd[1])
            case _:
                print('invalid subcommand')
        
    def turn(sub_cmd):
        match(sub_cmd[0]):
            case "left":
                tello.rotate_counter_clockwise(sub_cmd[1]) 
            case "right":
                tello.rotate_clockwise(sub_cmd[1])
            case _:
                print('invalid subcommand')
        
    def change(sub_cmd):
        match(sub_cmd[0]):
            case "speed":
                tello.set_speed(sub_cmd[1])
            case _:
                print('invalid subcommand')
                
    def show_video():
        while not stop_event.is_set():
            frame = tello.get_frame_read().frame
            _, buffer = cv2.imencode('.jpg', frame)
            yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
            
            
        """
            controls:
                1. move(direction) at preset speed
                2. move(direction) at dictated speed
                3. 
            
            
            process: allow only 2 threads to run
                - video stream thread
                - command being executed
                
            how to interrupt thread:
                - while the current command thread is running, and if the command generated by the WHisper API is different from the current command,
                the thread is terminated and a new thread is created to execute that command
                
                
            dictionary:
            1. move
                - up
                - down
                - left
                - right
                - forwards
                - backwards
            2. take off
            3. turn
                - left
                - right
            4. change
                - speed
        """
            